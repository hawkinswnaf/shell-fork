1. What is this?

fork is a "remote shell". It allows the user to remotely start a shell, manage jobs, and give input and take output from those jobs. This means that all jobs share fork as their parent and inherit its permissions which is great for Android applications that want to ask for SuperUser only once. All remote interactions with fork are done over TCP/IP and secured by an 8-byte randomly generated per-session key. 

1a. Job control

All job control happens over TCP/IP. Port 5001 is used for job output and port 5000 is used for job control and input. Communication between a fork client and fork is done using an ASCII protocol: KEY:COMMAND:TAG:EXTRA: 

KEY: The key is an 8-byte randomly generated per-session key. The client must submit a key that matches the one generated by the server. If it does not, the commands are executed.
COMMAND: One of START, STOP, INPUT, KILL. START and STOP start and stop processes, respectively. INPUT gives input to a process. KILL kills fork itself.
TAG: Identifies the process to be acted upon by the COMMAND. The TAG must be unique among currently running processes. TAGs can be reused once the associated process has finished. 
EXTRA: Only used by START and INPUT commands. For START commands, the EXTRA gives the command line to be executed to start a job. For INPUT commands, the EXTRA gives the actual input to be sent to the process' standard input.

1b. Job output

All job output is tagged with the process' tag. The tag is prepended to the job's output and separated from the actual output with a ":". E.g., 
GREP: asdfasdf
GREP: asdfasdf
PS: dddddddddd

2. API

The user can interact with fork directly through a TCP/IP socket. However, there is an included Java API that hides most of the fork protocol from the user. See the associated JavaDoc for information on how to use that API.

3. Building

Building fork itself is done with Make:
make

This puts the fork binary in the source code's root directory. There are associated unit tests that can be made with Make too:
make process_test
make encode_test

Building the Java API is done with Ant:
ant jar

This puts Shell.jar in the source code's root directory. There are associated unit tests that can be build and run with Ant too:
ant junit 

This builds the unit tests and executes them. Unit tests will take about 30 seconds to run. During that time, expect no output. All unit test output will be placed in a file in the source code's root directory (its filename is generated dynamically but will include the TEST- prefix). 
